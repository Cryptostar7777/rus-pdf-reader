import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const openAIApiKey = Deno.env.get('OPENAI_API_KEY');
    if (!openAIApiKey) {
      throw new Error('OPENAI_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ —Å–µ–∫—Ä–µ—Ç–∞—Ö');
    }

    const { text, section_info, chunk_index = 0, total_chunks = 1 } = await req.json();
    
    if (!text || text.trim() === '') {
      throw new Error('–¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
    }

    console.log(`üîÑ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö: —á–∞—Å—Ç—å ${chunk_index + 1}/${total_chunks}, ${text.length} —Å–∏–º–≤–æ–ª–æ–≤`);

    const prompt = `–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ó–ê–î–ê–ß–ê: –ò–∑–≤–ª–µ–∫–∏ –ê–ë–°–û–õ–Æ–¢–ù–û –í–°–ï –ø–æ–∑–∏—Ü–∏–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è, –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ –∏–∑–¥–µ–ª–∏–π –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π —Å–µ–∫—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞.

–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–ï–ö–¶–ò–ò:
- –ù–∞–∑–≤–∞–Ω–∏–µ: ${section_info?.title || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
- –¢–∏–ø: ${section_info?.type || '–ù–µ —É–∫–∞–∑–∞–Ω'}
- –ß–∞—Å—Ç—å: ${chunk_index + 1} –∏–∑ ${total_chunks}
- –°—Ç—Ä–∞–Ω–∏—Ü—ã: ${section_info?.pageNumbers?.join(', ') || '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ô –§–û–†–ú–ê–¢ JSON (–°–¢–†–û–ì–û –ë–ï–ó –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í):
{
  "extracted_items": [
    {
      "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã": "–∫–æ–¥ —Å–∏—Å—Ç–µ–º—ã (–ü1, –í1, –í2, –û–í –∏ —Ç.–¥.)", 
      "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞": "–í–µ–Ω—Ç–∏–ª—è—Ü–∏—è/–û—Ç–æ–ø–ª–µ–Ω–∏–µ/–•–æ–ª–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ", 
      "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": "–ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è/–º–∞—Ç–µ—Ä–∏–∞–ª–∞", 
      "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏": "–≤—Å–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", 
      "–¢–∏–ø, –º–∞—Ä–∫–∞, –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ": "–º–∞—Ä–∫–∞/–º–æ–¥–µ–ª—å", 
      "–ö–æ–¥ –∏–∑–¥–µ–ª–∏—è": "–∞—Ä—Ç–∏–∫—É–ª/–∫–æ–¥", 
      "–ó–∞–≤–æ–¥ –∏–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å": "–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å", 
      "–ï–¥ –∏–∑–º–µ—Ä–µ–Ω–∏—è": "—à—Ç./–º/–∫–≥/–º2 –∏ —Ç.–¥.", 
      "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": "—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", 
      "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ/–ú–∞—Ç–µ—Ä–∏–∞–ª—ã/–ò–∑–¥–µ–ª–∏—è", 
      "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ": "–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
    }
  ],
  "chunk_info": {
    "chunk_index": ${chunk_index},
    "total_chunks": ${total_chunks},
    "items_found": –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–Ω–∞–π–¥–µ–Ω–Ω—ã—Ö_–ø–æ–∑–∏—Ü–∏–π,
    "section_title": "${section_info?.title || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å–µ–∫—Ü–∏—è'}"
  },
  "processing_notes": [
    "–≤–∞–∂–Ω—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è"
  ]
}

–°–¢–†–û–ì–ò–ï –ü–†–ê–í–ò–õ–ê:
1. –í–û–ó–í–†–ê–©–ê–ô –¢–û–õ–¨–ö–û –ß–ò–°–¢–´–ô JSON –ë–ï–ó MARKDOWN –ò –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í!
2. –ò–ó–í–õ–ï–ö–ê–ô –ö–ê–ñ–î–£–Æ –ü–û–ó–ò–¶–ò–Æ - –Ω–∏–∫–∞–∫–∏—Ö —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π!
3. –ù–ò–ö–û–ì–î–ê –Ω–µ –ø–∏—à–∏ "–¥–∞–ª–µ–µ –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏", "–∏ —Ç.–¥.", "..." 
4. –ó–ê–ü–û–õ–ù–Ø–ô –í–°–ï –ü–û–õ–Ø –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω–æ
5. –ü–†–ê–í–ò–õ–¨–ù–û –ó–ê–í–ï–†–®–ê–ô JSON - –≤—Å–µ —Å–∫–æ–±–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–∫—Ä—ã—Ç—ã!
6. –ï—Å–ª–∏ —ç—Ç–æ —á–∞—Å—Ç—å –±–æ–ª—å—à–æ–π —Å–µ–∫—Ü–∏–∏ - –∏–∑–≤–ª–µ–∫–∞–π —Ç–æ–ª—å–∫–æ –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞

–¢–µ–∫—Å—Ç —Å–µ–∫—Ü–∏–∏: ${text}`;

    const maxAttempts = 3;
    let result = '';
    
    for (let attempts = 1; attempts <= maxAttempts; attempts++) {
      console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ${attempts} –∏–∑ ${maxAttempts}`);
      
      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${openAIApiKey}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          model: 'gpt-4.1-mini-2025-04-14', // –ë—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
          messages: [
            { 
              role: 'system', 
              content: '–¢—ã —Å—É–ø–µ—Ä-—Ç–æ—á–Ω—ã–π —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –ö–†–ò–¢–ò–ß–ù–û: –í–°–ï–ì–î–ê –≤–æ–∑–≤—Ä–∞—â–∞–π –ü–û–õ–ù–´–ô —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º JSON —Ñ–æ—Ä–º–∞—Ç–µ. –ù–ò–ö–û–ì–î–ê –Ω–µ —Å–æ–∫—Ä–∞—â–∞–π —Å–ø–∏—Å–∫–∏ –∏ –Ω–µ –ø–∏—à–∏ "–∏ —Ç.–¥.". –ò–ó–í–õ–ï–ö–ê–ô –í–°–ï –ø–æ–∑–∏—Ü–∏–∏ –±–µ–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏—è!' 
            },
            { role: 'user', content: prompt }
          ],
          temperature: 0.01,
          max_tokens: 16000, // –£–í–ï–õ–ò–ß–ï–ù–û –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –±–æ–ª—å—à–∏—Ö —Ç–∞–±–ª–∏—Ü
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        console.error('‚ùå OpenAI API error:', errorData);
        
        if (attempts === maxAttempts) {
          throw new Error(`OpenAI API –æ—à–∏–±–∫–∞: ${errorData.error?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
        }
        
        console.log(`üîÑ Retry after API error, attempt ${attempts + 1}`);
        await new Promise(resolve => setTimeout(resolve, 2000 * attempts));
        continue;
      }

      const data = await response.json();
      result = data.choices[0].message.content;

      console.log(`üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω, –¥–ª–∏–Ω–∞: ${result.length} —Å–∏–º–≤–æ–ª–æ–≤`);

      // –í–∞–ª–∏–¥–∞—Ü–∏—è JSON
      try {
        let cleanResult = result;
        if (result.includes('```json')) {
          cleanResult = result.split('```json')[1].split('```')[0].trim();
        } else if (result.includes('```')) {
          cleanResult = result.split('```')[1].split('```')[0].trim();
        }

        const parsed = JSON.parse(cleanResult);
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        if (!parsed.extracted_items || !Array.isArray(parsed.extracted_items)) {
          throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç extracted_items');
        }
        
        console.log(`‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π: ${parsed.extracted_items.length}`);
        result = cleanResult;
        break;
        
      } catch (parseError) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ ${attempts}:`, parseError.message);
        console.error(`‚ùå –ü—Ä–æ–±–ª–µ–º–Ω—ã–π –æ—Ç–≤–µ—Ç (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤):`, result.substring(0, 500));
        
        if (attempts === maxAttempts) {
          // –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
          const jsonMatch = result.match(/\{[\s\S]*\}/);
          if (jsonMatch) {
            try {
              JSON.parse(jsonMatch[0]);
              result = jsonMatch[0];
              console.log('‚úÖ –ù–∞–π–¥–µ–Ω –∏ –∏–∑–≤–ª–µ—á–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞');
              break;
            } catch {
              throw new Error('–ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫');
            }
          } else {
            throw new Error('JSON –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ AI');
          }
        }
        
        await new Promise(resolve => setTimeout(resolve, 1000 * attempts));
      }
    }

    return new Response(JSON.stringify({
      success: true,
      result: result,
      timestamp: new Date().toISOString()
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ data-extractor:', error);
    return new Response(JSON.stringify({
      success: false,
      error: error.message,
      timestamp: new Date().toISOString()
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});