import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const openAIApiKey = Deno.env.get('OPENAI_API_KEY');
    if (!openAIApiKey) {
      throw new Error('OPENAI_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ —Å–µ–∫—Ä–µ—Ç–∞—Ö');
    }

    const { text, total_pages } = await req.json();
    
    if (!text || text.trim() === '') {
      throw new Error('–¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
    }

    console.log(`üîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã PDF: ${total_pages} —Å—Ç—Ä–∞–Ω–∏—Ü, ${text.length} —Å–∏–º–≤–æ–ª–æ–≤`);

    const prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –∏ –Ω–∞–π–¥–∏ –í–°–ï —Ç–∞–±–ª–∏—Ü—ã, —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏, –≤–µ–¥–æ–º–æ—Å—Ç–∏ —Å –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ô —Ç–æ—á–Ω–æ—Å—Ç—å—é.

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –≤–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –°–¢–†–û–ì–û –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:
{
  "found_tables": [
    {
      "title": "—Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã/—Ä–∞–∑–¥–µ–ª–∞",
      "type": "—Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è|–≤–µ–¥–æ–º–æ—Å—Ç—å|—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏|—Ç–∞–±–ª–∏—Ü–∞",
      "content": "–ø–µ—Ä–≤—ã–µ 3-5 —Å—Ç—Ä–æ–∫ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏",
      "pageNumbers": [–Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü –≥–¥–µ –Ω–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞],
      "pageRange": {
        "start": –ø–µ—Ä–≤–∞—è_—Å—Ç—Ä–∞–Ω–∏—Ü–∞_—Å–µ–∫—Ü–∏–∏,
        "end": –ø–æ—Å–ª–µ–¥–Ω—è—è_—Å—Ç—Ä–∞–Ω–∏—Ü–∞_—Å–µ–∫—Ü–∏–∏
      },
      "estimatedRows": –ø—Ä–∏–º–µ—Ä–Ω–æ–µ_–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Å—Ç—Ä–æ–∫_–≤_—Ç–∞–±–ª–∏—Ü–µ,
      "complexity": "simple|medium|complex"
    }
  ],
  "total_pages": ${total_pages},
  "document_type": "—Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞",
  "summary": "–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä",
  "processing_strategy": {
    "total_sections": –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–Ω–∞–π–¥–µ–Ω–Ω—ã—Ö_—Å–µ–∫—Ü–∏–π,
    "large_sections": –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Å–µ–∫—Ü–∏–π_–±–æ–ª—å—à–µ_15_—Å—Ç—Ä–∞–Ω–∏—Ü,
    "recommended_chunks": —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ_–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—á–∞—Å—Ç–µ–π_–¥–ª—è_–æ–±—Ä–∞–±–æ—Ç–∫–∏
  }
}

–ü–†–ê–í–ò–õ–ê –ê–ù–ê–õ–ò–ó–ê:
1. –ò—â–∏ –í–°–ï —Ç–∞–±–ª–∏—Ü—ã, —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏, –≤–µ–¥–æ–º–æ—Å—Ç–∏ –±–µ–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
2. –û–ø—Ä–µ–¥–µ–ª—è–π –¢–û–ß–ù–´–ï –≥—Ä–∞–Ω–∏—Ü—ã –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã (–Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü)
3. –£–∫–∞–∑—ã–≤–∞–π –¥–∏–∞–ø–∞–∑–æ–Ω —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –∫–∞–∂–¥–æ–π —Å–µ–∫—Ü–∏–∏
4. –û—Ü–µ–Ω–∏–≤–∞–π —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∏ —Ä–∞–∑–º–µ—Ä –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã
5. –ù–ï –æ–±—ä–µ–¥–∏–Ω—è–π —Ä–∞–∑–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –æ–¥–Ω—É
6. –ü–ª–∞–Ω–∏—Ä—É–π —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Å–µ–∫—Ü–∏–π

–¢–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞: ${text}`;

    const maxAttempts = 3;
    let result = '';
    
    for (let attempts = 1; attempts <= maxAttempts; attempts++) {
      console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ ${attempts} –∏–∑ ${maxAttempts}`);
      
      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${openAIApiKey}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          model: 'gpt-4.1-mini-2025-04-14',
          messages: [
            { 
              role: 'system', 
              content: '–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –ö–†–ò–¢–ò–ß–ù–û: –í–°–ï–ì–î–ê –≤–æ–∑–≤—Ä–∞—â–∞–π –ü–û–õ–ù–´–ô JSON –±–µ–∑ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π. –ò—â–∏ –í–°–ï —Ç–∞–±–ª–∏—Ü—ã –∏ —Å–µ–∫—Ü–∏–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω–æ!' 
            },
            { role: 'user', content: prompt }
          ],
          temperature: 0.01,
          max_tokens: 8000, // –£–í–ï–õ–ò–ß–ï–ù–û –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        console.error('‚ùå OpenAI API error:', errorData);
        
        if (attempts === maxAttempts) {
          throw new Error(`OpenAI API –æ—à–∏–±–∫–∞: ${errorData.error?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
        }
        
        console.log(`üîÑ Retry after API error, attempt ${attempts + 1}`);
        await new Promise(resolve => setTimeout(resolve, 2000 * attempts));
        continue;
      }

      const data = await response.json();
      result = data.choices[0].message.content;

      console.log(`üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ª—É—á–µ–Ω, –¥–ª–∏–Ω–∞: ${result.length} —Å–∏–º–≤–æ–ª–æ–≤`);

      // –í–∞–ª–∏–¥–∞—Ü–∏—è JSON
      try {
        let cleanResult = result;
        if (result.includes('```json')) {
          cleanResult = result.split('```json')[1].split('```')[0].trim();
        } else if (result.includes('```')) {
          cleanResult = result.split('```')[1].split('```')[0].trim();
        }

        const parsed = JSON.parse(cleanResult);
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        if (!parsed.found_tables || !Array.isArray(parsed.found_tables)) {
          throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç found_tables');
        }
        
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–µ–∫—Ü–∏–π: ${parsed.found_tables.length}`);
        result = cleanResult;
        break;
        
      } catch (parseError) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ ${attempts}:`, parseError.message);
        
        if (attempts === maxAttempts) {
          // –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
          const jsonMatch = result.match(/\{[\s\S]*\}/);
          if (jsonMatch) {
            try {
              JSON.parse(jsonMatch[0]);
              result = jsonMatch[0];
              console.log('‚úÖ –ù–∞–π–¥–µ–Ω –∏ –∏–∑–≤–ª–µ—á–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞');
              break;
            } catch {
              throw new Error('–ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫');
            }
          } else {
            throw new Error('JSON –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ AI');
          }
        }
        
        await new Promise(resolve => setTimeout(resolve, 1000 * attempts));
      }
    }

    return new Response(JSON.stringify({
      success: true,
      result: result,
      timestamp: new Date().toISOString()
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ structure-analyzer:', error);
    return new Response(JSON.stringify({
      success: false,
      error: error.message,
      timestamp: new Date().toISOString()
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});