import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const openAIApiKey = Deno.env.get('OPENAI_API_KEY');
    if (!openAIApiKey) {
      throw new Error('OPENAI_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ —Å–µ–∫—Ä–µ—Ç–∞—Ö');
    }

    const { text, mode = 'test', sections_info } = await req.json();
    
    if (!text || text.trim() === '') {
      throw new Error('–¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
    }

    console.log(`AI –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤ —Ä–µ–∂–∏–º–µ ${mode}, –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: ${text.length} —Å–∏–º–≤–æ–ª–æ–≤`);

    let prompt = '';
    
    if (mode === 'test') {
      prompt = `–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å. –û—Ç–≤–µ—Ç—å: "AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ú–æ–¥–µ–ª—å: GPT-4.1-2025-04-14"`;
    
    } else if (mode === 'analyze_structure') {
      prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –∏ –Ω–∞–π–¥–∏ –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã, —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏, –≤–µ–¥–æ–º–æ—Å—Ç–∏ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é.
      
      –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –≤–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –°–¢–†–û–ì–û –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:
      {
        "found_tables": [
          {
            "title": "—Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã/—Ä–∞–∑–¥–µ–ª–∞",
            "type": "—Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è|–≤–µ–¥–æ–º–æ—Å—Ç—å|—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏|—Ç–∞–±–ª–∏—Ü–∞",
            "content": "–ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã/—Å–µ–∫—Ü–∏–∏",
            "pageNumbers": [–Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü –≥–¥–µ –Ω–∞–π–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞]
          }
        ],
        "total_pages": –æ–±—â–µ–µ_–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Å—Ç—Ä–∞–Ω–∏—Ü,
        "document_type": "—Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞",
        "summary": "–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä"
      }
      
      –ü–†–ê–í–ò–õ–ê –ê–ù–ê–õ–ò–ó–ê:
      1. –ò—â–∏ –í–°–ï —Ç–∞–±–ª–∏—Ü—ã, —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏, –≤–µ–¥–æ–º–æ—Å—Ç–∏ –±–µ–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
      2. –û–ø—Ä–µ–¥–µ–ª—è–π —Ç–æ—á–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã
      3. –£–∫–∞–∑—ã–≤–∞–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≥–¥–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–∞–∂–¥–∞—è —Ç–∞–±–ª–∏—Ü–∞
      4. –ù–ï –æ–±—ä–µ–¥–∏–Ω—è–π —Ä–∞–∑–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –æ–¥–Ω—É
      5. –°–æ—Ö—Ä–∞–Ω—è–π –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –∫–∞–∂–¥–æ–π –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
      
      –¢–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞: ${text}`;
    
    } else if (mode === 'extract_structured') {
      const sectionsDesc = sections_info ? 
        sections_info.map((s: any) => `- ${s.title} (${s.type}, —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${s.pageNumbers.join(', ')})`).join('\n') : 
        '–í—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–µ–∫—Ü–∏–∏';
        
      prompt = `–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ó–ê–î–ê–ß–ê: –ò–∑–≤–ª–µ–∫–∏ –ê–ë–°–û–õ–Æ–¢–ù–û –í–°–ï –ø–æ–∑–∏—Ü–∏–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è, –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ –∏–∑–¥–µ–ª–∏–π –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–µ–∫—Ü–∏–π –¥–æ–∫—É–º–µ–Ω—Ç–∞.

        –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–ú–´–ï –°–ï–ö–¶–ò–ò:
        ${sectionsDesc}

        –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ô –§–û–†–ú–ê–¢ JSON (–°–¢–†–û–ì–û –ë–ï–ó –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í):
        {
          "extracted_items": [
            {
              "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã": "–∫–æ–¥ —Å–∏—Å—Ç–µ–º—ã (–ü1, –í1, –í2, –û–í –∏ —Ç.–¥.)", 
              "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞": "–í–µ–Ω—Ç–∏–ª—è—Ü–∏—è/–û—Ç–æ–ø–ª–µ–Ω–∏–µ/–•–æ–ª–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ", 
              "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": "–ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è/–º–∞—Ç–µ—Ä–∏–∞–ª–∞", 
              "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏": "–≤—Å–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", 
              "–¢–∏–ø, –º–∞—Ä–∫–∞, –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ": "–º–∞—Ä–∫–∞/–º–æ–¥–µ–ª—å", 
              "–ö–æ–¥ –∏–∑–¥–µ–ª–∏—è": "–∞—Ä—Ç–∏–∫—É–ª/–∫–æ–¥", 
              "–ó–∞–≤–æ–¥ –∏–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å": "–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å", 
              "–ï–¥ –∏–∑–º–µ—Ä–µ–Ω–∏—è": "—à—Ç./–º/–∫–≥/–º2 –∏ —Ç.–¥.", 
              "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": "—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", 
              "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ/–ú–∞—Ç–µ—Ä–∏–∞–ª—ã/–ò–∑–¥–µ–ª–∏—è", 
              "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ": "–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
            }
          ],
          "summary": {
            "total_items": –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö_–ø–æ–∑–∏—Ü–∏–π,
            "systems_found": ["—Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º"],
            "sections_processed": ["—Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–µ–∫—Ü–∏–π"]
          }
        }

        –°–¢–†–û–ì–ò–ï –ü–†–ê–í–ò–õ–ê:
        1. –í–û–ó–í–†–ê–©–ê–ô –¢–û–õ–¨–ö–û –ß–ò–°–¢–´–ô JSON –ë–ï–ó MARKDOWN –ò –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í!
        2. –ò–ó–í–õ–ï–ö–ê–ô –ö–ê–ñ–î–£–Æ –ü–û–ó–ò–¶–ò–Æ - –Ω–∏–∫–∞–∫–∏—Ö —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π!
        3. –ù–ò–ö–û–ì–î–ê –Ω–µ –ø–∏—à–∏ "–¥–∞–ª–µ–µ –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏", "–∏ —Ç.–¥.", "..." 
        4. –ó–ê–ü–û–õ–ù–Ø–ô –í–°–ï –ü–û–õ–Ø –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω–æ
        5. –ü–†–ê–í–ò–õ–¨–ù–û –ó–ê–í–ï–†–®–ê–ô JSON - –≤—Å–µ —Å–∫–æ–±–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–∫—Ä—ã—Ç—ã!

        –¢–µ–∫—Å—Ç —Å–µ–∫—Ü–∏–π: ${text}`;
    
    } else {
      throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ä–µ–∂–∏–º: ${mode}`);
    }

    // –í—ã–∑–æ–≤ OpenAI API
    const maxAttempts = 3;
    let result = '';
    let tokensUsed: any = {};
    
    for (let attempts = 1; attempts <= maxAttempts; attempts++) {
      console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ ${attempts} –∏–∑ ${maxAttempts}`);
      
      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${openAIApiKey}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          model: 'gpt-4.1-2025-04-14',
          messages: [
            { 
              role: 'system', 
              content: '–¢—ã —Å—É–ø–µ—Ä-—Ç–æ—á–Ω—ã–π —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –ö–†–ò–¢–ò–ß–ù–û: –í–°–ï–ì–î–ê –≤–æ–∑–≤—Ä–∞—â–∞–π –ü–û–õ–ù–´–ô —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º JSON —Ñ–æ—Ä–º–∞—Ç–µ. –ù–ò–ö–û–ì–î–ê –Ω–µ —Å–æ–∫—Ä–∞—â–∞–π —Å–ø–∏—Å–∫–∏ –∏ –Ω–µ –ø–∏—à–∏ "–∏ —Ç.–¥.". –ò–ó–í–õ–ï–ö–ê–ô –í–°–ï –ø–æ–∑–∏—Ü–∏–∏ –±–µ–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏—è!' 
            },
            { role: 'user', content: prompt }
          ],
          temperature: 0.01,
          max_tokens: 50000,
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        console.error('‚ùå OpenAI API error:', errorData);
        
        if (attempts === maxAttempts) {
          throw new Error(`OpenAI API –æ—à–∏–±–∫–∞: ${errorData.error?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
        }
        
        console.log(`üîÑ Retry after API error, attempt ${attempts + 1}`);
        await new Promise(resolve => setTimeout(resolve, 2000 * attempts));
        continue;
      }

      const data = await response.json();
      result = data.choices[0].message.content;
      tokensUsed = data.usage;

      console.log(`üìÑ AI –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω, –¥–ª–∏–Ω–∞: ${result.length} —Å–∏–º–≤–æ–ª–æ–≤`);

      // –í–∞–ª–∏–¥–∞—Ü–∏—è JSON –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤
      if (mode === 'analyze_structure' || mode === 'extract_structured') {
        try {
          // –ü–æ–ø—ã—Ç–∫–∞ –æ—á–∏—Å—Ç–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç markdown
          let cleanResult = result;
          if (result.includes('```json')) {
            cleanResult = result.split('```json')[1].split('```')[0].trim();
          } else if (result.includes('```')) {
            cleanResult = result.split('```')[1].split('```')[0].trim();
          }

          const parsed = JSON.parse(cleanResult);
          console.log('‚úÖ JSON –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ');
          result = cleanResult;
          break;
        } catch (parseError) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ ${attempts}:`, parseError.message);
          console.error(`‚ùå –ü—Ä–æ–±–ª–µ–º–Ω—ã–π –æ—Ç–≤–µ—Ç (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤):`, result.substring(0, 500));
          console.error(`‚ùå –ü—Ä–æ–±–ª–µ–º–Ω—ã–π –æ—Ç–≤–µ—Ç (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 200 —Å–∏–º–≤–æ–ª–æ–≤):`, result.slice(-200));
          
          if (attempts === maxAttempts) {
            // –í —Å–ª—É—á–∞–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–ø—ã—Ç–∫–∏, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ JSON –≤ –æ—Ç–≤–µ—Ç–µ
            const jsonMatch = result.match(/\{[\s\S]*\}/);
            if (jsonMatch) {
              try {
                JSON.parse(jsonMatch[0]);
                result = jsonMatch[0];
                console.log('‚úÖ –ù–∞–π–¥–µ–Ω –∏ –∏–∑–≤–ª–µ—á–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞');
                break;
              } catch {
                // –ï—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ –ø–æ–º–æ–≥–ª–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
                throw new Error('–ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫');
              }
            } else {
              throw new Error('JSON –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ AI');
            }
          }
          
          await new Promise(resolve => setTimeout(resolve, 1000 * attempts));
        }
      } else {
        break;
      }
    }

    return new Response(JSON.stringify({
      success: true,
      result: result,
      mode,
      text_length: text.length,
      tokens_used: tokensUsed,
      timestamp: new Date().toISOString()
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ AI text processor:', error);
    return new Response(JSON.stringify({
      success: false,
      error: error.message,
      timestamp: new Date().toISOString()
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});