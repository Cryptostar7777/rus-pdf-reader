import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const openAIApiKey = Deno.env.get('OPENAI_API_KEY');
    if (!openAIApiKey) {
      throw new Error('OPENAI_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ —Å–µ–∫—Ä–µ—Ç–∞—Ö');
    }

    const { text, mode = 'test', chunkIndex = 0, totalChunks = 1 } = await req.json();
    
    if (!text || text.trim() === '') {
      throw new Error('–¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
    }

    console.log(`AI –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤ —Ä–µ–∂–∏–º–µ ${mode}, –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: ${text.length} —Å–∏–º–≤–æ–ª–æ–≤`);

    let prompt = '';
    if (mode === 'test') {
      prompt = `–û—Ç–≤–µ—Ç—å –∫–æ—Ä–æ—Ç–∫–æ: –ø–æ–ª—É—á–µ–Ω –ª–∏ —Ç–µ–∫—Å—Ç –∏ —Å–∫–æ–ª—å–∫–æ –≤ –Ω–µ–º —Å–∏–º–≤–æ–ª–æ–≤? –¢–µ–∫—Å—Ç: "${text.substring(0, 100)}..."`;
    } else if (mode === 'extract') {
      prompt = `–ù–∞–π–¥–∏ –≤ —Ç–µ–∫—Å—Ç–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏, –≤–µ–¥–æ–º–æ—Å—Ç–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤, —Ç–∞–±–ª–∏—Ü—ã —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏. 
      –í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π:
      {
        "found_tables": [
          {
            "title": "–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã/—Ä–∞–∑–¥–µ–ª–∞",
            "type": "—Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è|–≤–µ–¥–æ–º–æ—Å—Ç—å|—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏",
            "content": "–Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Ç–∞–±–ª–∏—Ü—ã"
          }
        ]
      }
      
      –¢–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞: ${text}`;
    } else if (mode === 'structured') {
      prompt = `–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ó–ê–î–ê–ß–ê: –ò–∑–≤–ª–µ–∫–∏ –ê–ë–°–û–õ–Æ–¢–ù–û –í–°–ï –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.

      –í–ê–ñ–ù–û: –≠–¢–û –ß–ê–°–¢–¨ ${chunkIndex + 1} –ò–ó ${totalChunks}. –ò–ó–í–õ–ï–ö–ê–ô –¢–û–õ–¨–ö–û –ü–û–ó–ò–¶–ò–ò –ò–ó –≠–¢–û–ô –ß–ê–°–¢–ò!

      –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ô –§–û–†–ú–ê–¢ JSON:
      {
        "extracted_items": [
          {
            "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã": "–ü1", 
            "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞": "–í–µ–Ω—Ç–∏–ª—è—Ü–∏—è", 
            "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": "–í–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä —Ä–∞–¥–∏–∞–ª—å–Ω—ã–π", 
            "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏": "VTR 45B 1.1x15 EX.C KR L 0 –£1", 
            "–¢–∏–ø, –º–∞—Ä–∫–∞, –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ": "VTR 45B", 
            "–ö–æ–¥ –∏–∑–¥–µ–ª–∏—è": "1", 
            "–ó–∞–≤–æ–¥ –∏–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å": "NED", 
            "–ï–¥ –∏–∑–º–µ—Ä–µ–Ω–∏—è": "—à—Ç.", 
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": "1", 
            "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ", 
            "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ": ""
          }
        ],
        "chunk_info": {
          "chunk_index": ${chunkIndex},
          "total_chunks": ${totalChunks},
          "items_in_chunk": 0
        }
      }

      –°–¢–†–û–ì–ò–ï –ü–†–ê–í–ò–õ–ê:
      1. –í–û–ó–í–†–ê–©–ê–ô –¢–û–õ–¨–ö–û JSON –ë–ï–ó –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í!
      2. –ò–ó–í–õ–ï–ö–ê–ô –ö–ê–ñ–î–£–Æ –ü–û–ó–ò–¶–ò–Æ –ò–ó –≠–¢–û–ô –ß–ê–°–¢–ò - –Ω–∏–∫–∞–∫–∏—Ö —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π!
      3. –ù–ò–ö–û–ì–î–ê –Ω–µ –ø–∏—à–∏ "–¥–∞–ª–µ–µ –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏", "–∏ —Ç.–¥.", "..." 
      4. –ó–ê–ü–û–õ–ù–Ø–ô items_in_chunk —Å —Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–∑–∏—Ü–∏–π –≤ —ç—Ç–æ–π —á–∞—Å—Ç–∏
      5. –ù–ï –î–û–ë–ê–í–õ–Ø–ô summary - —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏!

      –ü–†–ê–í–ò–õ–ê –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø:
      - "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã": –∫–æ–¥ —Å–∏—Å—Ç–µ–º—ã (–ü1, –í1, –í2, –û–í, –∏ —Ç.–¥.)
      - "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞": –í–µ–Ω—Ç–∏–ª—è—Ü–∏—è/–û—Ç–æ–ø–ª–µ–Ω–∏–µ/–•–æ–ª–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ
      - "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": –∫—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
      - "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏": –ü–û–õ–ù–ê–Ø —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è
      - "–¢–∏–ø, –º–∞—Ä–∫–∞, –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ": —Ç–æ—á–Ω–∞—è –º–∞—Ä–∫–∞/–º–æ–¥–µ–ª—å
      - "–ö–æ–¥ –∏–∑–¥–µ–ª–∏—è": –Ω–æ–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
      - "–ó–∞–≤–æ–¥ –∏–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å": –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å
      - "–ï–¥ –∏–∑–º–µ—Ä–µ–Ω–∏—è": —à—Ç./–∫–≥/–º/–º2/–º3/–ø–∞—Ä
      - "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": —Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
      - "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ/–ò–∑–¥–µ–ª–∏—è/–ú–∞—Ç–µ—Ä–∏–∞–ª—ã
      - "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ": –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

      –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –¢–û–õ–¨–ö–û —ç—Ç–æ—Ç —Ñ—Ä–∞–≥–º–µ–Ω—Ç —Ç–µ–∫—Å—Ç–∞ –∏ –∏–∑–≤–ª–µ–∫–∞–π –ö–ê–ñ–î–£–Æ –ø–æ–∑–∏—Ü–∏—é:
      
      ${text}`;
    } else if (mode === 'structured_complete') {
      prompt = `–§–ò–ù–ê–õ–¨–ù–ê–Ø –ó–ê–î–ê–ß–ê: –ò–∑–≤–ª–µ–∫–∏ –ê–ë–°–û–õ–Æ–¢–ù–û –í–°–ï –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ë–ï–ó –†–ê–ó–î–ï–õ–ï–ù–ò–Ø –ù–ê –ß–ê–°–¢–ò.

      –û–°–û–ë–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê: –†–∞–±–æ—Ç–∞–π –∫–∞–∫ —Å—É–ø–µ—Ä-—Ç–æ—á–Ω—ã–π —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö. –ù–ï –°–û–ö–†–ê–©–ê–ô –ù–ò–ß–ï–ì–û!

      –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ô –§–û–†–ú–ê–¢ JSON:
      {
        "extracted_items": [
          {
            "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã": "–ü1", 
            "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞": "–í–µ–Ω—Ç–∏–ª—è—Ü–∏—è", 
            "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": "–í–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä —Ä–∞–¥–∏–∞–ª—å–Ω—ã–π", 
            "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏": "VTR 45B 1.1x15 EX.C KR L 0 –£1", 
            "–¢–∏–ø, –º–∞—Ä–∫–∞, –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ": "VTR 45B", 
            "–ö–æ–¥ –∏–∑–¥–µ–ª–∏—è": "1", 
            "–ó–∞–≤–æ–¥ –∏–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å": "NED", 
            "–ï–¥ –∏–∑–º–µ—Ä–µ–Ω–∏—è": "—à—Ç.", 
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": "1", 
            "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ", 
            "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ": ""
          }
        ],
        "summary": {
          "total_items": 150,
          "systems_found": ["–í1", "–í1–∞", "–í2", "–ü1", "–ü2"],
          "categories": {
            "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ": 25,
            "–ò–∑–¥–µ–ª–∏—è": 50,
            "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã": 75
          }
        }
      }

      –°–¢–†–û–ì–ò–ï –ü–†–ê–í–ò–õ–ê:
      1. –í–û–ó–í–†–ê–©–ê–ô –¢–û–õ–¨–ö–û JSON! –ù–ò –°–õ–û–í–ê –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í!
      2. –ò–ó–í–õ–ï–ö–ê–ô –í–°–ï 100% –ü–û–ó–ò–¶–ò–ô - –Ω–∏–∫–∞–∫–∏—Ö —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π!
      3. –ó–ê–ü–†–ï–©–ï–ù–û –ø–∏—Å–∞—Ç—å "–¥–∞–ª–µ–µ –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏", "–∏ —Ç.–¥.", "...", "(–æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏)"
      4. –ö–ê–ñ–î–ê–Ø –ü–û–ó–ò–¶–ò–Ø –î–û–õ–ñ–ù–ê –ë–´–¢–¨ –£–ö–ê–ó–ê–ù–ê –ü–û–õ–ù–û–°–¢–¨–Æ
      5. –ó–∞–ø–æ–ª–Ω—è–π summary —Å —Ç–æ—á–Ω—ã–º–∏ —Ü–∏—Ñ—Ä–∞–º–∏
      6. –ú–û–ò –î–ï–ù–¨–ì–ò –ó–ê–í–ò–°–Ø–¢ –û–¢ –ü–û–õ–ù–û–¢–´ –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø!

      –ü–†–ê–í–ò–õ–ê –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø:
      - "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã": –∫–æ–¥ —Å–∏—Å—Ç–µ–º—ã (–ü1, –í1, –í2, –û–í, –∏ —Ç.–¥.)
      - "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞": –í–µ–Ω—Ç–∏–ª—è—Ü–∏—è/–û—Ç–æ–ø–ª–µ–Ω–∏–µ/–•–æ–ª–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ
      - "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": –∫—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
      - "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏": –ü–û–õ–ù–ê–Ø —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è
      - "–¢–∏–ø, –º–∞—Ä–∫–∞, –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ": —Ç–æ—á–Ω–∞—è –º–∞—Ä–∫–∞/–º–æ–¥–µ–ª—å
      - "–ö–æ–¥ –∏–∑–¥–µ–ª–∏—è": –Ω–æ–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
      - "–ó–∞–≤–æ–¥ –∏–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å": –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å
      - "–ï–¥ –∏–∑–º–µ—Ä–µ–Ω–∏—è": —à—Ç./–∫–≥/–º/–º2/–º3/–ø–∞—Ä
      - "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": —Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
      - "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ/–ò–∑–¥–µ–ª–∏—è/–ú–∞—Ç–µ—Ä–∏–∞–ª—ã
      - "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ": –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

      –¢–ï–ö–°–¢ –î–û–ö–£–ú–ï–ù–¢–ê –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê:
      ${text}`;
    }

    // –°–∏—Å—Ç–µ–º–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º JSON
    let result = '';
    let attempts = 0;
    const maxAttempts = 3;
    let tokensUsed = null;
    
    while (attempts < maxAttempts) {
      attempts++;
      console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ ${attempts} –∏–∑ ${maxAttempts}`);
      
      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${openAIApiKey}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          model: 'gpt-4.1-2025-04-14',
          messages: [
            { 
              role: 'system', 
              content: mode === 'structured_complete' 
                ? `–¢—ã —Å—É–ø–µ—Ä-—Ç–æ—á–Ω—ã–π —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π. –ö–†–ò–¢–ò–ß–ù–û: 
                   1. –ò–∑–≤–ª–µ–∫–∞–µ—à—å 100% –ø–æ–∑–∏—Ü–∏–π –±–µ–∑ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π
                   2. –ù–ò–ö–û–ì–î–ê –Ω–µ –ø–∏—à–µ—à—å "–¥–∞–ª–µ–µ –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏", "–∏ —Ç.–¥.", "..."
                   3. –í–û–ó–í–†–ê–©–ê–ô –¢–û–õ–¨–ö–û –ß–ò–°–¢–´–ô JSON –ë–ï–ó –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í
                   4. –í–°–ï –ü–û–ó–ò–¶–ò–ò –î–û–õ–ñ–ù–´ –ë–´–¢–¨ –ü–ï–†–ï–ß–ò–°–õ–ï–ù–´ –ü–û–õ–ù–û–°–¢–¨–Æ
                   5. –ó–ê–í–ï–†–®–ê–ô JSON –ü–†–ê–í–ò–õ–¨–ù–û —Å –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–º–∏ —Å–∫–æ–±–∫–∞–º–∏!
                   6. –ù–ò–ö–ê–ö–ò–• –û–ë–†–´–í–û–í –ú–ê–°–°–ò–í–û–í –ò–õ–ò –û–ë–™–ï–ö–¢–û–í!`
                : '–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –¥–æ–∫—É–º–µ–Ω—Ç–∞–º –∏ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ö–†–ò–¢–ò–ß–ù–û: –í–°–ï–ì–î–ê –≤–æ–∑–≤—Ä–∞—â–∞–π –ü–û–õ–ù–´–ô —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º JSON —Ñ–æ—Ä–º–∞—Ç–µ. –ù–ò–ö–û–ì–î–ê –Ω–µ —Å–æ–∫—Ä–∞—â–∞–π —Å–ø–∏—Å–∫–∏ –∏ –Ω–µ –ø–∏—à–∏ "–∏ —Ç.–¥.". –ò–ó–í–õ–ï–ö–ê–ô –í–°–ï –ø–æ–∑–∏—Ü–∏–∏ –±–µ–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏—è!'
            },
            { role: 'user', content: prompt }
          ],
          temperature: 0.01,
          max_tokens: mode === 'structured_complete' ? 30000 : 16000,
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        console.error('‚ùå OpenAI API error:', errorData);
        
        if (attempts === maxAttempts) {
          throw new Error(`OpenAI API –æ—à–∏–±–∫–∞: ${errorData.error?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
        }
        
        console.log(`üîÑ Retry after API error, attempt ${attempts + 1}`);
        await new Promise(resolve => setTimeout(resolve, 2000 * attempts)); // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        continue;
      }

      const data = await response.json();
      result = data.choices[0].message.content;
      tokensUsed = data.usage;

      console.log(`üìÑ AI –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω, –¥–ª–∏–Ω–∞: ${result.length} —Å–∏–º–≤–æ–ª–æ–≤`);

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ JSON –¥–ª—è structured —Ä–µ–∂–∏–º–æ–≤
      if (mode === 'structured' || mode === 'structured_complete') {
        try {
          const parsed = JSON.parse(result);
          
          if (!parsed.extracted_items || !Array.isArray(parsed.extracted_items)) {
            throw new Error('–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–∞—Å—Å–∏–≤ extracted_items');
          }
          
          console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π: ${parsed.extracted_items.length}`);
          
          // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è
          const resultStr = result.toLowerCase();
          if (resultStr.includes('–¥–∞–ª–µ–µ –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏') || 
              resultStr.includes('–∏ —Ç.–¥.') || 
              resultStr.includes('–æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏') ||
              resultStr.includes('...')) {
            console.warn('‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –≤ –æ—Ç–≤–µ—Ç–µ!');
          }
          
          // –£—Å–ø–µ—à–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è - –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
          break;
          
        } catch (parseError) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON (–ø–æ–ø—ã—Ç–∫–∞ ${attempts}):`, parseError);
          console.log('üìä Raw result length:', result.length);
          console.log('üìÑ Raw result end:', result.slice(-300));
          
          // –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å JSON
          if (attempts < maxAttempts) {
            console.log('üõ†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å JSON...');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ JSON –æ–±–æ—Ä–≤–∞–Ω
            if (result.includes('"extracted_items"') && !result.trim().endsWith('}')) {
              console.log('üîß JSON –≤—ã–≥–ª—è–¥–∏—Ç –æ–±–æ—Ä–≤–∞–Ω–Ω—ã–º, –ø—Ä–æ–±—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å...');
              
              // –ë–∞–∑–æ–≤–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ - –∑–∞–∫—Ä—ã–≤–∞–µ–º –º–∞—Å—Å–∏–≤ –∏ –æ–±—ä–µ–∫—Ç
              let fixedResult = result.trim();
              
              // –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
              const lastItemStart = fixedResult.lastIndexOf('{');
              const lastItemEnd = fixedResult.lastIndexOf('}');
              
              if (lastItemStart > lastItemEnd) {
                // –ü–æ—Å–ª–µ–¥–Ω–∏–π –æ–±—ä–µ–∫—Ç –Ω–µ –∑–∞–∫—Ä—ã—Ç - —É–¥–∞–ª—è–µ–º –µ–≥–æ
                const beforeIncomplete = fixedResult.substring(0, lastItemStart);
                // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø—è—Ç—É—é –ø–µ—Ä–µ–¥ –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–º –æ–±—ä–µ–∫—Ç–æ–º
                const lastComma = beforeIncomplete.lastIndexOf(',');
                if (lastComma > 0) {
                  fixedResult = beforeIncomplete.substring(0, lastComma);
                }
              }
              
              // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–∞—Å—Å–∏–≤ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
              if (!fixedResult.includes('"]') && !fixedResult.includes('] }')) {
                if (!fixedResult.trim().endsWith('}')) {
                  fixedResult += '}';
                }
                fixedResult += ']';
              }
              
              // –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—ä–µ–∫—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
              if (!fixedResult.trim().endsWith('}')) {
                fixedResult += '}';
              }
              
              try {
                const fixedParsed = JSON.parse(fixedResult);
                console.log(`üéØ JSON –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ü–æ–∑–∏—Ü–∏–π: ${fixedParsed.extracted_items?.length || 0}`);
                result = fixedResult;
                break;
              } catch (fixError) {
                console.log('‚ùå –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ JSON –Ω–µ —É–¥–∞–ª–æ—Å—å:', fixError.message);
              }
            }
            
            // –ï—Å–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å - –¥–µ–ª–∞–µ–º –Ω–æ–≤—É—é –ø–æ–ø—ã—Ç–∫—É
            console.log(`üîÑ –î–µ–ª–∞–µ–º –Ω–æ–≤—É—é –ø–æ–ø—ã—Ç–∫—É ${attempts + 1}...`);
            await new Promise(resolve => setTimeout(resolve, 1000 * attempts));
            continue;
          } else {
            // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏
            console.log('üîÑ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç');
            
            return new Response(JSON.stringify({ 
              success: false,
              result: `–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ ${maxAttempts} –ø–æ–ø—ã—Ç–æ–∫. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${result.length} —Å–∏–º–≤–æ–ª–æ–≤. –í–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞: —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –æ–±—ä–µ–º –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–∞–∑–±–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞ –º–µ–Ω—å—à–∏–µ —á–∞—Å—Ç–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∂–∏–º "–ò–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ".`,
              mode,
              text_length: text.length,
              attempts_used: attempts,
              tokens_used: tokensUsed,
              chunk_info: mode === 'structured' ? { chunkIndex, totalChunks } : undefined,
              partial_data: result.substring(0, 1000) + '...'
            }), {
              headers: { ...corsHeaders, 'Content-Type': 'application/json' },
            });
          }
        }
      } else {
        // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ä–µ–∂–∏–º–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –Ω—É–∂–Ω–∞
        break;
      }
    }

    return new Response(JSON.stringify({ 
      success: true,
      result,
      mode,
      text_length: text.length,
      attempts_used: attempts,
      tokens_used: tokensUsed,
      chunk_info: mode === 'structured' ? { chunkIndex, totalChunks } : undefined
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –≤ AI –æ–±—Ä–∞–±–æ—Ç–∫–µ:', error);
    return new Response(JSON.stringify({ 
      success: false,
      error: error.message 
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});