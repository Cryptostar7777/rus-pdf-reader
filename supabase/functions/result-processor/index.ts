import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { chunks_results, validation_info } = await req.json();
    
    if (!chunks_results || !Array.isArray(chunks_results)) {
      throw new Error('chunks_results –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º');
    }

    console.log(`üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${chunks_results.length} —á–∞—Å—Ç–µ–π`);

    // –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
    const allItems: any[] = [];
    const processingNotes: string[] = [];
    const sectionsProcessed: string[] = [];
    
    for (const chunk of chunks_results) {
      if (chunk.success && chunk.result) {
        try {
          const parsed = JSON.parse(chunk.result);
          
          if (parsed.extracted_items && Array.isArray(parsed.extracted_items)) {
            allItems.push(...parsed.extracted_items);
          }
          
          if (parsed.chunk_info?.section_title) {
            sectionsProcessed.push(parsed.chunk_info.section_title);
          }
          
          if (parsed.processing_notes && Array.isArray(parsed.processing_notes)) {
            processingNotes.push(...parsed.processing_notes);
          }
          
        } catch (parseError) {
          console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ chunk result:', parseError);
          processingNotes.push(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–π –∏–∑ —á–∞—Å—Ç–µ–π: ${parseError.message}`);
        }
      } else {
        processingNotes.push(`–û—à–∏–±–∫–∞ –≤ –æ–¥–Ω–æ–π –∏–∑ —á–∞—Å—Ç–µ–π: ${chunk.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
      }
    }

    console.log(`üìä –í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π –ø–æ—Å–ª–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è: ${allItems.length}`);

    // –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    const uniqueItems = removeDuplicates(allItems);
    console.log(`üîÑ –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${uniqueItems.length}`);

    // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Å–∏—Å—Ç–µ–º–∞–º
    const systemsFound = [...new Set(uniqueItems.map(item => item["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"]).filter(Boolean))];
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–Ω–æ—Ç—ã
    const validationResults = validateCompleteness(uniqueItems, validation_info);

    // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    const finalResult = {
      extracted_items: uniqueItems,
      summary: {
        total_items: uniqueItems.length,
        systems_found: systemsFound,
        sections_processed: [...new Set(sectionsProcessed)],
        duplicates_removed: allItems.length - uniqueItems.length,
        validation: validationResults
      },
      processing_info: {
        chunks_processed: chunks_results.length,
        successful_chunks: chunks_results.filter(c => c.success).length,
        failed_chunks: chunks_results.filter(c => !c.success).length,
        processing_notes: processingNotes,
        timestamp: new Date().toISOString()
      }
    };

    console.log(`‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–æ—Ç–æ–≤: ${finalResult.summary.total_items} –ø–æ–∑–∏—Ü–∏–π`);

    return new Response(JSON.stringify({
      success: true,
      result: finalResult,
      timestamp: new Date().toISOString()
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ result-processor:', error);
    return new Response(JSON.stringify({
      success: false,
      error: error.message,
      timestamp: new Date().toISOString()
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});

// –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
function removeDuplicates(items: any[]): any[] {
  const seen = new Set<string>();
  return items.filter(item => {
    // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    const key = `${item["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ"] || ''}_${item["–¢–∏–ø, –º–∞—Ä–∫–∞, –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ"] || ''}_${item["–ö–æ–¥ –∏–∑–¥–µ–ª–∏—è"] || ''}`.toLowerCase();
    
    if (seen.has(key)) {
      return false; // –î—É–±–ª–∏–∫–∞—Ç
    }
    
    seen.add(key);
    return true;
  });
}

// –§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–ª–Ω–æ—Ç—ã
function validateCompleteness(items: any[], validationInfo: any) {
  const validation = {
    warnings: [] as string[],
    stats: {
      items_with_missing_fields: 0,
      items_without_quantity: 0,
      items_without_manufacturer: 0,
      systems_coverage: 0
    }
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ–ª–µ–π
  items.forEach(item => {
    const missingFields: string[] = [];
    
    if (!item["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ"] || item["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ"].trim() === '') {
      missingFields.push("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ");
    }
    
    if (!item["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"] || item["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"].trim() === '') {
      validation.stats.items_without_quantity++;
    }
    
    if (!item["–ó–∞–≤–æ–¥ –∏–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å"] || item["–ó–∞–≤–æ–¥ –∏–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å"].trim() === '') {
      validation.stats.items_without_manufacturer++;
    }
    
    if (missingFields.length > 0) {
      validation.stats.items_with_missing_fields++;
    }
  });

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
  if (validationInfo?.expected_minimum_items) {
    if (items.length < validationInfo.expected_minimum_items) {
      validation.warnings.push(`–ò–∑–≤–ª–µ—á–µ–Ω–æ ${items.length} –ø–æ–∑–∏—Ü–∏–π, –æ–∂–∏–¥–∞–ª–æ—Å—å –º–∏–Ω–∏–º—É–º ${validationInfo.expected_minimum_items}`);
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º
  const systemsFound = new Set(items.map(item => item["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"]).filter(Boolean));
  validation.stats.systems_coverage = systemsFound.size;

  if (validation.stats.items_without_quantity > items.length * 0.1) {
    validation.warnings.push(`–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–∑–∏—Ü–∏–π –±–µ–∑ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: ${validation.stats.items_without_quantity}`);
  }

  return validation;
}