import React, { useState } from 'react';
import * as pdfjsLib from 'pdfjs-dist';
import { UploadZone } from './ui/upload-zone';
import { TextDisplay } from './ui/text-display';
import { Button } from './ui/button';
import { Progress } from './ui/progress';
import { AlertCircle, Download, FileText, Brain, FileSpreadsheet } from 'lucide-react';
import { Alert, AlertDescription } from './ui/alert';
import { useToast } from '@/hooks/use-toast';
import { supabase } from '@/integrations/supabase/client';
import * as XLSX from 'xlsx';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ PDF.js
pdfjsLib.GlobalWorkerOptions.workerSrc = new URL(
  'pdfjs-dist/build/pdf.worker.min.mjs',
  import.meta.url
).toString();

interface PageText {
  pageNumber: number;
  text: string;
}

export const PDFParser: React.FC = () => {
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [isProcessing, setIsProcessing] = useState(false);
  const [progress, setProgress] = useState(0);
  const [extractedText, setExtractedText] = useState<PageText[]>([]);
  const [error, setError] = useState<string | null>(null);
  const [aiResult, setAiResult] = useState<string | null>(null);
  const [structureAnalysis, setStructureAnalysis] = useState<any>(null);
  const [structuredData, setStructuredData] = useState<any>(null);
  const [isAiProcessing, setIsAiProcessing] = useState(false);
  
  // –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
  const [processingStatus, setProcessingStatus] = useState<string>('');
  const [tokenUsage, setTokenUsage] = useState<{
    totalTokens: number;
    inputTokens: number;
    outputTokens: number;
    totalCost: number;
    attempts: number;
  }>({
    totalTokens: 0,
    inputTokens: 0,
    outputTokens: 0,
    totalCost: 0,
    attempts: 0
  });
  
  const { toast } = useToast();

  // –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–ª—è GPT-4.1-2025-04-14
  const calculateCost = (inputTokens: number, outputTokens: number) => {
    const inputCostPer1K = 0.010; // $0.010 per 1K input tokens
    const outputCostPer1K = 0.030; // $0.030 per 1K output tokens
    
    const inputCost = (inputTokens / 1000) * inputCostPer1K;
    const outputCost = (outputTokens / 1000) * outputCostPer1K;
    
    return inputCost + outputCost;
  };

  const handleFileSelect = (file: File | null) => {
    setSelectedFile(file);
    setExtractedText([]);
    setError(null);
    setProgress(0);
    setAiResult(null);
    setStructureAnalysis(null);
    setStructuredData(null);
    setProcessingStatus('');
    setTokenUsage({
      totalTokens: 0,
      inputTokens: 0,
      outputTokens: 0,
      totalCost: 0,
      attempts: 0
    });
  };

  const extractTextFromPDF = async () => {
    if (!selectedFile) return;

    setIsProcessing(true);
    setError(null);
    setProgress(0);
    setExtractedText([]);

    try {
      const arrayBuffer = await selectedFile.arrayBuffer();
      const pdf = await pdfjsLib.getDocument({ data: arrayBuffer }).promise;
      const numPages = pdf.numPages;
      const pages: PageText[] = [];

      toast({
        title: "–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É",
        description: `–ù–∞–π–¥–µ–Ω–æ ${numPages} —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏`,
      });

      for (let pageNum = 1; pageNum <= numPages; pageNum++) {
        try {
          const page = await pdf.getPage(pageNum);
          const textContent = await page.getTextContent();
          
          // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
          const pageText = textContent.items
            .map((item: any) => {
              if ('str' in item) {
                return item.str;
              }
              return '';
            })
            .join(' ')
            .replace(/\s+/g, ' ')
            .trim();

          pages.push({
            pageNumber: pageNum,
            text: pageText
          });

          // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
          const progressValue = (pageNum / numPages) * 100;
          setProgress(progressValue);
          setExtractedText([...pages]);

        } catch (pageError) {
          console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${pageNum}:`, pageError);
          pages.push({
            pageNumber: pageNum,
            text: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${pageNum}`
          });
        }
      }

      setExtractedText(pages);
      toast({
        title: "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
        description: `–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω –∏–∑ ${pages.length} —Å—Ç—Ä–∞–Ω–∏—Ü`,
      });

    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF:', err);
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF —Ñ–∞–π–ª–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω.');
      toast({
        title: "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å PDF —Ñ–∞–π–ª",
        variant: "destructive",
      });
    } finally {
      setIsProcessing(false);
      setProgress(100);
    }
  };

  const downloadText = () => {
    if (extractedText.length === 0) return;

    const content = extractedText
      .map(page => `=== –°–¢–†–ê–ù–ò–¶–ê ${page.pageNumber} ===\n${page.text}`)
      .join('\n\n');

    const blob = new Blob([content], { type: 'text/plain;charset=utf-8' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `${selectedFile?.name.replace('.pdf', '')}_extracted_text.txt`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);

    toast({
      title: "–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω",
      description: "–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª",
    });
  };

  const testAiIntegration = async () => {
    setIsAiProcessing(true);
    setError(null);
    
    try {
      const testText = "–ü—Ä–∏–≤–µ—Ç! –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å OpenAI API.";
      
      console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ AI...');
      const { data, error } = await supabase.functions.invoke('ai-text-processor', {
        body: { 
          text: testText,
          mode: 'test'
        }
      });

      if (error) throw error;

      if (data.success) {
        setAiResult(data.result);
        toast({
          title: "AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç!",
          description: `–¢–æ–∫–µ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${data.tokens_used?.total_tokens || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`,
        });
      } else {
        throw new Error(data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ AI');
      }

    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ AI —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', err);
      setError(`–û—à–∏–±–∫–∞ AI: ${err.message}`);
      toast({
        title: "–û—à–∏–±–∫–∞ AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏",
        description: err.message,
        variant: "destructive",
      });
    } finally {
      setIsAiProcessing(false);
    }
  };

  const analyzeDocumentStructure = async () => {
    if (extractedText.length === 0) {
      toast({
        title: "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
        description: "–°–Ω–∞—á–∞–ª–∞ –∏–∑–≤–ª–µ–∫–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–∑ PDF",
        variant: "destructive",
      });
      return;
    }

    setIsAiProcessing(true);
    setError(null);
    
    try {
      // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∏–∑ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
      const fullText = extractedText
        .map(page => `=== –°–¢–†–ê–ù–ò–¶–ê ${page.pageNumber} ===\n${page.text}`)
        .join('\n\n');
      
      console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã, —Å–∏–º–≤–æ–ª–æ–≤:', fullText.length);
      
      const { data, error } = await supabase.functions.invoke('ai-text-processor', {
        body: { 
          text: fullText,
          mode: 'extract'
        }
      });

      if (error) throw error;

      if (data.success) {
        console.log('–ü–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:', data.result);
        
        // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –æ—Ç–≤–µ—Ç
        try {
          const parsedResult = JSON.parse(data.result);
          setStructureAnalysis(parsedResult);
          
          toast({
            title: "–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω",
            description: `–ù–∞–π–¥–µ–Ω–æ ${parsedResult.found_tables?.length || 0} —Ç–∞–±–ª–∏—Ü/—Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π`,
          });
        } catch (parseError) {
          // –ï—Å–ª–∏ –Ω–µ JSON, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
          setStructureAnalysis({ raw_response: data.result });
          
          toast({
            title: "–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω",
            description: "–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω (—Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç)",
          });
        }

      } else {
        throw new Error(data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞');
      }

    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:', err);
      setError(`–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: ${err.message}`);
      toast({
        title: "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞",
        description: err.message,
        variant: "destructive",
      });
    } finally {
      setIsAiProcessing(false);
    }
  };

  const extractCompleteStructuredData = async () => {
    if (extractedText.length === 0) {
      toast({
        title: "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞", 
        description: "–°–Ω–∞—á–∞–ª–∞ –∏–∑–≤–ª–µ–∫–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–∑ PDF",
        variant: "destructive",
      });
      return;
    }

    setIsAiProcessing(true);
    setError(null);
    setProcessingStatus('üéØ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø–æ–ª–Ω–æ–º—É –∏–∑–≤–ª–µ—á–µ–Ω–∏—é...');
    
    try {
      // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∏–∑ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
      const fullText = extractedText
        .map(page => `=== –°–¢–†–ê–ù–ò–¶–ê ${page.pageNumber} ===\n${page.text}`)
        .join('\n\n');
      
      setProcessingStatus(`üìÑ –û—Ç–ø—Ä–∞–≤–∫–∞ ${fullText.length} —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...`);
      console.log('üéØ –ü–û–õ–ù–û–ï –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö, —Å–∏–º–≤–æ–ª–æ–≤:', fullText.length);
      
      const { data, error } = await supabase.functions.invoke('ai-text-processor', {
        body: { 
          text: fullText,
          mode: 'structured_complete'
        }
      });

      if (error) {
        throw new Error(`–û—à–∏–±–∫–∞ API: ${error.message}`);
      }

      if (data.success) {
        setProcessingStatus('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI...');
        console.log('üéØ –ü–æ–ª—É—á–µ–Ω –ø–æ–ª–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –¥–ª–∏–Ω–∞:', data.result.length);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–∫–µ–Ω–æ–≤
        if (data.tokens_used) {
          const newTokens = {
            totalTokens: tokenUsage.totalTokens + (data.tokens_used.total_tokens || 0),
            inputTokens: tokenUsage.inputTokens + (data.tokens_used.prompt_tokens || 0),
            outputTokens: tokenUsage.outputTokens + (data.tokens_used.completion_tokens || 0),
            attempts: tokenUsage.attempts + (data.attempts_used || 1),
            totalCost: 0
          };
          
          newTokens.totalCost = tokenUsage.totalCost + calculateCost(
            data.tokens_used.prompt_tokens || 0,
            data.tokens_used.completion_tokens || 0
          );
          
          setTokenUsage(newTokens);
          setProcessingStatus(`üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ ${data.tokens_used.total_tokens} —Ç–æ–∫–µ–Ω–æ–≤ (–ø–æ–ø—ã—Ç–∫–∞ ${data.attempts_used || 1})`);
        }
        
        try {
          const structuredResult = JSON.parse(data.result);
          console.log('üéØ Parsed complete data:', structuredResult);
          
          // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è
          const resultStr = data.result.toLowerCase();
          if (resultStr.includes('–¥–∞–ª–µ–µ –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏') || 
              resultStr.includes('–∏ —Ç.–¥.') || 
              resultStr.includes('–æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏') ||
              resultStr.includes('...')) {
            console.warn('‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –≤ –æ—Ç–≤–µ—Ç–µ!');
            setProcessingStatus('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –≤ –æ—Ç–≤–µ—Ç–µ');
            toast({
              title: "–í–Ω–∏–º–∞–Ω–∏–µ: –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
              description: "AI —Å–æ–∫—Ä–∞—Ç–∏–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
              variant: "destructive",
            });
          } else {
            setProcessingStatus('‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
          }
          
          setStructuredData(structuredResult);
          
          const itemsCount = structuredResult.extracted_items?.length || 0;
          const expectedCount = structuredResult.summary?.total_items;
          
          toast({
            title: "–ü–æ–ª–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ",
            description: `–ò–∑–≤–ª–µ—á–µ–Ω–æ ${itemsCount} –ø–æ–∑–∏—Ü–∏–π${expectedCount ? ` –∏–∑ ${expectedCount} –æ–∂–∏–¥–∞–µ–º—ã—Ö` : ''}`,
            variant: itemsCount === expectedCount ? "default" : "destructive"
          });
          
        } catch (parseError) {
          console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', parseError);
          console.log('Raw result:', data.result);
          
          setStructuredData({ 
            extracted_items: [], 
            raw_response: data.result,
            parse_error: parseError.message 
          });
          
          toast({
            title: "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞",
            description: "–ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ raw_response.",
            variant: "destructive",
          });
        }

      } else {
        throw new Error(data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è');
      }

    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è:', err);
      setError(`–û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: ${err.message}`);
      toast({
        title: "–û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è",
        description: err.message,
        variant: "destructive",
      });
    } finally {
      setIsAiProcessing(false);
      setTimeout(() => setProcessingStatus(''), 3000); // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    }
  };

  const extractStructuredData = async () => {
    if (extractedText.length === 0) {
      toast({
        title: "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
        description: "–°–Ω–∞—á–∞–ª–∞ –∏–∑–≤–ª–µ–∫–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–∑ PDF",
        variant: "destructive",
      });
      return;
    }

    setIsAiProcessing(true);
    setError(null);
    setProcessingStatus('üìÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∏–∑–≤–ª–µ—á–µ–Ω–∏—é –¥–∞–Ω–Ω—ã—Ö...');
    
    try {
      // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∏–∑ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
      const fullText = extractedText
        .map(page => `=== –°–¢–†–ê–ù–ò–¶–ê ${page.pageNumber} ===\n${page.text}`)
        .join('\n\n');
      
      setProcessingStatus(`üìÑ –û—Ç–ø—Ä–∞–≤–∫–∞ ${fullText.length} —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...`);
      console.log('–ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, —Å–∏–º–≤–æ–ª–æ–≤:', fullText.length);
      
      const { data, error } = await supabase.functions.invoke('ai-text-processor', {
        body: { 
          text: fullText,
          mode: 'structured'
        }
      });

      if (error) throw error;

      if (data.success) {
        setProcessingStatus('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI...');
        console.log('–ü–æ–ª—É—á–µ–Ω—ã —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', data.result);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–∫–µ–Ω–æ–≤
        if (data.tokens_used) {
          const newTokens = {
            totalTokens: tokenUsage.totalTokens + (data.tokens_used.total_tokens || 0),
            inputTokens: tokenUsage.inputTokens + (data.tokens_used.prompt_tokens || 0),
            outputTokens: tokenUsage.outputTokens + (data.tokens_used.completion_tokens || 0),
            attempts: tokenUsage.attempts + (data.attempts_used || 1),
            totalCost: 0
          };
          
          newTokens.totalCost = tokenUsage.totalCost + calculateCost(
            data.tokens_used.prompt_tokens || 0,
            data.tokens_used.completion_tokens || 0
          );
          
          setTokenUsage(newTokens);
          setProcessingStatus(`üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ ${data.tokens_used.total_tokens} —Ç–æ–∫–µ–Ω–æ–≤`);
        }
        
        // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –æ—Ç–≤–µ—Ç
        try {
          const parsedResult = JSON.parse(data.result);
          setStructuredData(parsedResult);
          setProcessingStatus('‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
          
          toast({
            title: "–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ",
            description: `–ò–∑–≤–ª–µ—á–µ–Ω–æ ${parsedResult.extracted_items?.length || 0} –ø–æ–∑–∏—Ü–∏–π`,
          });
        } catch (parseError) {
          // –ï—Å–ª–∏ –Ω–µ JSON, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
          setStructuredData({ raw_response: data.result });
          setProcessingStatus('‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç');
          
          toast({
            title: "–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ",
            description: "–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã (—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞)",
          });
        }

      } else {
        throw new Error(data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è');
      }

    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', err);
      setError(`–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: ${err.message}`);
      setProcessingStatus('‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è');
      toast({
        title: "–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è",
        description: err.message,
        variant: "destructive",
      });
    } finally {
      setIsAiProcessing(false);
      setTimeout(() => setProcessingStatus(''), 3000); // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    }
  };

  const exportToExcel = () => {
    if (!structuredData?.extracted_items || structuredData.extracted_items.length === 0) {
      toast({
        title: "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞",
        description: "–°–Ω–∞—á–∞–ª–∞ –∏–∑–≤–ª–µ–∫–∏—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
        variant: "destructive",
      });
      return;
    }

    try {
      // –°–æ–∑–¥–∞–µ–º —Ä–∞–±–æ—á—É—é –∫–Ω–∏–≥—É
      const wb = XLSX.utils.book_new();
      
      // –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏
      const ws = XLSX.utils.json_to_sheet(structuredData.extracted_items);
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
      const colWidths = [
        { wch: 15 }, // –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
        { wch: 20 }, // –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞  
        { wch: 40 }, // –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
        { wch: 50 }, // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        { wch: 20 }, // –¢–∏–ø, –º–∞—Ä–∫–∞
        { wch: 10 }, // –ö–æ–¥ –∏–∑–¥–µ–ª–∏—è
        { wch: 20 }, // –ó–∞–≤–æ–¥ –∏–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å
        { wch: 10 }, // –ï–¥ –∏–∑–º–µ—Ä–µ–Ω–∏—è
        { wch: 10 }, // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
        { wch: 15 }, // –ö–∞—Ç–µ–≥–æ—Ä–∏—è
        { wch: 25 }  // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ
      ];
      ws['!cols'] = colWidths;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ª–∏—Å—Ç –≤ –∫–Ω–∏–≥—É
      XLSX.utils.book_append_sheet(wb, ws, "–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è");
      
      // –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
      const fileName = `${selectedFile?.name.replace('.pdf', '') || 'specification'}_structured_data.xlsx`;
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
      XLSX.writeFile(wb, fileName);
      
      toast({
        title: "Excel —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω",
        description: `–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${structuredData.extracted_items.length} –ø–æ–∑–∏—Ü–∏–π –≤ ${fileName}`,
      });
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Excel:', error);
      toast({
        title: "–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Excel —Ñ–∞–π–ª",
        variant: "destructive",
      });
    }
  };

  return (
    <div className="w-full max-w-4xl mx-auto space-y-6">
      <UploadZone
        onFileSelect={handleFileSelect}
        selectedFile={selectedFile}
        isLoading={isProcessing}
      />

      {error && (
        <Alert variant="destructive">
          <AlertCircle className="h-4 w-4" />
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      )}

      {selectedFile && !isProcessing && extractedText.length === 0 && (
        <div className="text-center space-y-4">
          <Button
            onClick={extractTextFromPDF}
            size="lg"
            className="bg-gradient-primary hover:opacity-90 shadow-elegant mr-4"
          >
            <FileText className="h-5 w-5 mr-2" />
            –ò–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ PDF
          </Button>
          
          <Button
            onClick={testAiIntegration}
            size="lg"
            variant="secondary"
            disabled={isAiProcessing}
            className="bg-primary/10 hover:bg-primary/20"
          >
            <Brain className="h-5 w-5 mr-2" />
            {isAiProcessing ? '–¢–µ—Å—Ç–∏—Ä—É–µ–º AI...' : '–¢–µ—Å—Ç AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏'}
          </Button>
        </div>
      )}

      {/* AI —Ä–µ–∑—É–ª—å—Ç–∞—Ç */}
      {aiResult && (
        <div className="space-y-4">
          <Alert>
            <Brain className="h-4 w-4" />
            <AlertDescription>
              <strong>–†–µ–∑—É–ª—å—Ç–∞—Ç AI —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</strong>
              <div className="mt-2 p-3 bg-muted rounded text-sm">
                {aiResult}
              </div>
            </AlertDescription>
          </Alert>
        </div>
      )}

      {isProcessing && (
        <div className="space-y-3">
          <div className="text-center">
            <p className="text-sm text-muted-foreground">
              –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º PDF –¥–æ–∫—É–º–µ–Ω—Ç...
            </p>
          </div>
          <Progress value={progress} className="w-full" />
        </div>
      )}

      {extractedText.length > 0 && (
        <div className="space-y-4">
          <div className="flex justify-between items-center flex-wrap gap-2">
            <Button
              onClick={downloadText}
              variant="outline"
              className="flex items-center space-x-2"
            >
              <Download className="h-4 w-4" />
              <span>–°–∫–∞—á–∞—Ç—å —Ç–µ–∫—Å—Ç</span>
            </Button>
            
            <div className="flex gap-2">
              <Button
                onClick={analyzeDocumentStructure}
                disabled={isAiProcessing}
                variant="secondary"
                className="bg-primary/10 hover:bg-primary/20"
              >
                <Brain className="h-5 w-5 mr-2" />
                {isAiProcessing ? '–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º...' : '–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã'}
              </Button>
              
              <Button
                onClick={extractStructuredData}
                disabled={isAiProcessing}
                className="bg-gradient-primary hover:opacity-90"
              >
                <FileText className="h-5 w-5 mr-2" />
                {isAiProcessing ? '–ò–∑–≤–ª–µ–∫–∞–µ–º...' : '–ò–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ'}
              </Button>
              
              <Button
                onClick={extractCompleteStructuredData}
                disabled={isAiProcessing}
                variant="outline"
                className="border-primary text-primary hover:bg-primary hover:text-white"
              >
                <FileText className="h-5 w-5 mr-2" />
                {isAiProcessing ? '–ü–æ–ª–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ...' : '–ü–û–õ–ù–û–ï –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ'}
              </Button>
              
              {structuredData?.extracted_items && (
                <Button
                  onClick={exportToExcel}
                  variant="outline"
                  className="bg-success/10 hover:bg-success/20 border-success/50"
                >
                  <FileSpreadsheet className="h-5 w-5 mr-2" />
                  –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
                </Button>
              )}
            </div>
          </div>
          
          {/* –°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ —Å—á–µ—Ç—á–∏–∫ —Ç–æ–∫–µ–Ω–æ–≤ */}
          {(isAiProcessing || processingStatus || tokenUsage.totalTokens > 0) && (
            <div className="space-y-3">
              {/* –°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ */}
              {(isAiProcessing || processingStatus) && (
                <div className="bg-muted/50 border border-border rounded-lg p-4">
                  <div className="flex items-center space-x-2">
                    {isAiProcessing && (
                      <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-primary"></div>
                    )}
                    <span className="text-sm font-medium">
                      {processingStatus || '–û–±—Ä–∞–±–æ—Ç–∫–∞...'}
                    </span>
                  </div>
                  {isAiProcessing && (
                    <div className="mt-2">
                      <div className="w-full bg-background rounded-full h-2">
                        <div className="bg-primary h-2 rounded-full animate-pulse" style={{width: '60%'}}></div>
                      </div>
                    </div>
                  )}
                </div>
              )}
              
              {/* –°—á–µ—Ç—á–∏–∫ —Ç–æ–∫–µ–Ω–æ–≤ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ */}
              {tokenUsage.totalTokens > 0 && (
                <div className="bg-card border border-border rounded-lg p-4 space-y-2">
                  <h4 className="text-sm font-semibold text-card-foreground">üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</h4>
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                    <div className="space-y-1">
                      <p className="text-muted-foreground">–í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤</p>
                      <p className="font-mono font-medium">{tokenUsage.totalTokens.toLocaleString()}</p>
                    </div>
                    <div className="space-y-1">
                      <p className="text-muted-foreground">–í—Ö–æ–¥—è—â–∏–µ</p>
                      <p className="font-mono font-medium text-blue-600">{tokenUsage.inputTokens.toLocaleString()}</p>
                    </div>
                    <div className="space-y-1">
                      <p className="text-muted-foreground">–ò—Å—Ö–æ–¥—è—â–∏–µ</p>
                      <p className="font-mono font-medium text-green-600">{tokenUsage.outputTokens.toLocaleString()}</p>
                    </div>
                    <div className="space-y-1">
                      <p className="text-muted-foreground">–°—Ç–æ–∏–º–æ—Å—Ç—å</p>
                      <p className="font-mono font-medium text-purple-600">${tokenUsage.totalCost.toFixed(4)}</p>
                    </div>
                  </div>
                  {tokenUsage.attempts > 1 && (
                    <div className="mt-2 text-xs text-muted-foreground">
                      –°–¥–µ–ª–∞–Ω–æ –ø–æ–ø—ã—Ç–æ–∫: {tokenUsage.attempts}
                    </div>
                  )}
                </div>
              )}
            </div>
          )}
          
          
          {/* –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã */}
          {structureAnalysis && (
            <div className="space-y-4">
              <Alert>
                <Brain className="h-4 w-4" />
                <AlertDescription>
                  <strong>–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞:</strong>
                  <div className="mt-3">
                    {structureAnalysis.found_tables ? (
                      <div className="space-y-3">
                        {structureAnalysis.found_tables.map((table: any, index: number) => (
                          <div key={index} className="border border-border rounded-lg p-4 bg-card">
                            <h4 className="font-semibold text-card-foreground mb-2">
                              {table.title || `–¢–∞–±–ª–∏—Ü–∞ ${index + 1}`}
                            </h4>
                            <p className="text-sm text-muted-foreground mb-2">
                              –¢–∏–ø: <span className="font-medium">{table.type || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</span>
                            </p>
                            <div className="text-sm text-card-foreground bg-muted p-3 rounded max-h-32 overflow-y-auto">
                              {table.content || '–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω–æ'}
                            </div>
                          </div>
                        ))}
                      </div>
                    ) : (
                      <div className="p-3 bg-muted rounded text-sm">
                        {structureAnalysis.raw_response || JSON.stringify(structureAnalysis, null, 2)}
                      </div>
                    )}
                  </div>
                </AlertDescription>
              </Alert>
            </div>
          )}
          
          {/* –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö */}
          {structuredData && (
            <div className="space-y-4">
              <Alert>
                <FileText className="h-4 w-4" />
                <AlertDescription>
                  <strong>–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</strong>
                  {structuredData.summary && (
                    <div className="mt-2 p-2 bg-muted/50 rounded text-sm">
                      <strong>–°–≤–æ–¥–∫–∞:</strong> {structuredData.summary.total_items} –ø–æ–∑–∏—Ü–∏–π, 
                      —Å–∏—Å—Ç–µ–º—ã: {structuredData.summary.systems_found?.join(', ')}
                    </div>
                  )}
                  <div className="mt-3">
                    {structuredData.extracted_items ? (
                      <div className="overflow-x-auto">
                        <table className="min-w-full border border-border rounded-lg">
                          <thead className="bg-muted">
                            <tr>
                              <th className="border border-border px-2 py-1 text-xs">–ù–∞–∏–º. —Å–∏—Å—Ç–µ–º—ã</th>
                              <th className="border border-border px-2 py-1 text-xs">–†–∞–∑–¥–µ–ª</th>
                              <th className="border border-border px-2 py-1 text-xs">–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ</th>
                              <th className="border border-border px-2 py-1 text-xs">–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</th>
                              <th className="border border-border px-2 py-1 text-xs">–ú–∞—Ä–∫–∞</th>
                              <th className="border border-border px-2 py-1 text-xs">–ö–æ–¥</th>
                              <th className="border border-border px-2 py-1 text-xs">–ó–∞–≤–æ–¥</th>
                              <th className="border border-border px-2 py-1 text-xs">–ï–¥.–∏–∑–º</th>
                              <th className="border border-border px-2 py-1 text-xs">–ö–æ–ª-–≤–æ</th>
                              <th className="border border-border px-2 py-1 text-xs">–ö–∞—Ç–µ–≥–æ—Ä–∏—è</th>
                            </tr>
                          </thead>
                          <tbody>
                            {structuredData.extracted_items.slice(0, 20).map((item: any, index: number) => (
                              <tr key={index} className="hover:bg-muted/50">
                                <td className="border border-border px-2 py-1 text-xs">{item["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"] || ''}</td>
                                <td className="border border-border px-2 py-1 text-xs">{item["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞"] || ''}</td>
                                <td className="border border-border px-2 py-1 text-xs">{item["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ"] || ''}</td>
                                <td className="border border-border px-2 py-1 text-xs max-w-xs truncate" title={item["–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"]}>{item["–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"] || ''}</td>
                                <td className="border border-border px-2 py-1 text-xs">{item["–¢–∏–ø, –º–∞—Ä–∫–∞, –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ"] || ''}</td>
                                <td className="border border-border px-2 py-1 text-xs">{item["–ö–æ–¥ –∏–∑–¥–µ–ª–∏—è"] || ''}</td>
                                <td className="border border-border px-2 py-1 text-xs">{item["–ó–∞–≤–æ–¥ –∏–∑–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å"] || ''}</td>
                                <td className="border border-border px-2 py-1 text-xs">{item["–ï–¥ –∏–∑–º–µ—Ä–µ–Ω–∏—è"] || ''}</td>
                                <td className="border border-border px-2 py-1 text-xs">{item["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"] || ''}</td>
                                <td className="border border-border px-2 py-1 text-xs">{item["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"] || ''}</td>
                              </tr>
                            ))}
                          </tbody>
                        </table>
                        {structuredData.extracted_items.length > 20 && (
                          <p className="text-sm text-muted-foreground mt-2">
                            –ü–æ–∫–∞–∑–∞–Ω–æ –ø–µ—Ä–≤—ã—Ö 20 –∏–∑ {structuredData.extracted_items.length} –ø–æ–∑–∏—Ü–∏–π
                            {structuredData.summary?.total_items && 
                              ` (–æ–∂–∏–¥–∞–ª–æ—Å—å: ${structuredData.summary.total_items})`
                            }
                          </p>
                        )}
                      </div>
                    ) : (
                      <div className="p-3 bg-muted rounded text-sm">
                        {structuredData.raw_response || JSON.stringify(structuredData, null, 2)}
                      </div>
                    )}
                  </div>
                </AlertDescription>
              </Alert>
            </div>
          )}
          
          <TextDisplay
            pages={extractedText}
            fileName={selectedFile?.name}
          />
        </div>
      )}
    </div>
  );
};