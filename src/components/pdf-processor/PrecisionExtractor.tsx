import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Progress } from '@/components/ui/progress';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { supabase } from '@/integrations/supabase/client';
import { toast } from 'sonner';
import { TableSection, ExtractionResult, PageText } from './types';
import { CheckCircle, AlertTriangle, Clock, FileText } from 'lucide-react';
import { ExtractionResults } from './ExtractionResults';

interface PrecisionExtractorProps {
  selectedSections: TableSection[];
  pdfPages: PageText[];
  onExtractionComplete: (data: ExtractionResult) => void;
  onStatusChange: (status: string) => void;
}

interface ProcessingStage {
  id: string;
  name: string;
  status: 'pending' | 'running' | 'completed' | 'error';
  progress: number;
  result?: any;
  error?: string;
}

export const PrecisionExtractor: React.FC<PrecisionExtractorProps> = ({
  selectedSections,
  pdfPages,
  onExtractionComplete,
  onStatusChange
}) => {
  const [isProcessing, setIsProcessing] = useState(false);
  const [stages, setStages] = useState<ProcessingStage[]>([
    { id: 'structure', name: '–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã', status: 'pending', progress: 0 },
    { id: 'chunking', name: '–£–º–Ω–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏', status: 'pending', progress: 0 },
    { id: 'extraction', name: '–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö', status: 'pending', progress: 0 },
    { id: 'processing', name: '–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è', status: 'pending', progress: 0 }
  ]);

  const updateStage = (stageId: string, updates: Partial<ProcessingStage>) => {
    setStages(prev => prev.map(stage => 
      stage.id === stageId ? { ...stage, ...updates } : stage
    ));
  };

  const getFullSectionContent = (section: TableSection): string => {
    const startPage = Math.max(1, section.pageRange.start - 1);
    const endPage = Math.min(pdfPages.length, section.pageRange.end + 1);
    
    return pdfPages
      .filter(page => page.pageNumber >= startPage && page.pageNumber <= endPage)
      .map(page => page.text)
      .join('\n\n');
  };

  const chunkLargeSection = (section: TableSection, maxPagesPerChunk: number = 12) => {
    const totalPages = section.pageRange.end - section.pageRange.start + 1;
    
    if (totalPages <= maxPagesPerChunk) {
      return [{
        ...section,
        fullContent: getFullSectionContent(section),
        chunkIndex: 0,
        totalChunks: 1
      }];
    }

    const chunks = [];
    const pagesPerChunk = Math.ceil(totalPages / Math.ceil(totalPages / maxPagesPerChunk));
    
    for (let i = 0; i < totalPages; i += pagesPerChunk) {
      const chunkStart = section.pageRange.start + i;
      const chunkEnd = Math.min(section.pageRange.end, chunkStart + pagesPerChunk - 1);
      
      const chunkSection = {
        ...section,
        id: `${section.id}_chunk_${chunks.length}`,
        title: `${section.title} (—á–∞—Å—Ç—å ${chunks.length + 1})`,
        pageRange: { start: chunkStart, end: chunkEnd },
        pageNumbers: Array.from({ length: chunkEnd - chunkStart + 1 }, (_, idx) => chunkStart + idx),
        chunkIndex: chunks.length,
        totalChunks: Math.ceil(totalPages / pagesPerChunk)
      };
      
      chunkSection.fullContent = getFullSectionContent(chunkSection);
      chunks.push(chunkSection);
    }
    
    return chunks;
  };

  const startPrecisionExtraction = async () => {
    setIsProcessing(true);
    onStatusChange('–ó–∞–ø—É—Å–∫ precision-first –∏–∑–≤–ª–µ—á–µ–Ω–∏—è...');

    try {
      // –≠—Ç–∞–ø 1: –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
      updateStage('structure', { status: 'running', progress: 20 });
      onStatusChange('–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏...');

      const allText = pdfPages.map(page => page.text).join('\n\n');
      
      const structureResponse = await supabase.functions.invoke('structure-analyzer', {
        body: { 
          text: allText,
          total_pages: pdfPages.length
        }
      });

      if (structureResponse.error) {
        throw new Error(structureResponse.error.message);
      }

      const structureResult = JSON.parse(structureResponse.data.result);
      updateStage('structure', { status: 'completed', progress: 100, result: structureResult });

      // –≠—Ç–∞–ø 2: –£–º–Ω–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ
      updateStage('chunking', { status: 'running', progress: 30 });
      onStatusChange('–†–∞–∑–±–∏–µ–Ω–∏–µ –±–æ–ª—å—à–∏—Ö —Å–µ–∫—Ü–∏–π –Ω–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏...');

      const allChunks = [];
      for (const section of selectedSections) {
        const chunks = chunkLargeSection(section);
        allChunks.push(...chunks);
      }

      console.log(`üìä –°–æ–∑–¥–∞–Ω–æ —á–∞—Å—Ç–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${allChunks.length}`);
      updateStage('chunking', { 
        status: 'completed', 
        progress: 100, 
        result: { total_chunks: allChunks.length, sections_split: selectedSections.length }
      });

      // –≠—Ç–∞–ø 3: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ
      updateStage('extraction', { status: 'running', progress: 40 });
      onStatusChange(`–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ ${allChunks.length} —á–∞—Å—Ç–µ–π...`);

      const extractionPromises = allChunks.map(async (chunk, index) => {
        try {
          onStatusChange(`–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Å—Ç–∏ ${index + 1}/${allChunks.length}: ${chunk.title}`);
          
          const response = await supabase.functions.invoke('data-extractor', {
            body: {
              text: chunk.fullContent,
              section_info: {
                title: chunk.title,
                type: chunk.type,
                pageNumbers: chunk.pageNumbers
              },
              chunk_index: chunk.chunkIndex || 0,
              total_chunks: chunk.totalChunks || 1
            }
          });

          if (response.error) {
            console.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞—Å—Ç–∏ ${index + 1}:`, response.error);
            return { success: false, error: response.error.message, chunk_index: index };
          }

          return { success: true, result: response.data.result, chunk_index: index };
        } catch (error) {
          console.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞—Å—Ç–∏ ${index + 1}:`, error);
          return { success: false, error: error.message, chunk_index: index };
        }
      });

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ –±–∞—Ç—á–∞–º –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –Ω–∞–≥—Ä—É–∑–∫–∏
      const batchSize = 3;
      const extractionResults = [];
      
      for (let i = 0; i < extractionPromises.length; i += batchSize) {
        const batch = extractionPromises.slice(i, i + batchSize);
        const batchResults = await Promise.all(batch);
        extractionResults.push(...batchResults);
        
        const progressPercent = Math.min(95, 40 + (i + batchSize) / extractionPromises.length * 50);
        updateStage('extraction', { progress: progressPercent });
      }

      updateStage('extraction', { 
        status: 'completed', 
        progress: 100, 
        result: { 
          total_processed: extractionResults.length,
          successful: extractionResults.filter(r => r.success).length,
          failed: extractionResults.filter(r => !r.success).length
        }
      });

      // –≠—Ç–∞–ø 4: –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è
      updateStage('processing', { status: 'running', progress: 96 });
      onStatusChange('–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–Ω–æ—Ç—ã...');

      const processingResponse = await supabase.functions.invoke('result-processor', {
        body: {
          chunks_results: extractionResults,
          validation_info: {
            expected_minimum_items: Math.floor(allChunks.length * 10), // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
            selected_sections_count: selectedSections.length,
            total_pages_processed: allChunks.reduce((sum, chunk) => 
              sum + (chunk.pageRange.end - chunk.pageRange.start + 1), 0
            )
          }
        }
      });

      if (processingResponse.error) {
        throw new Error(processingResponse.error.message);
      }

      const finalResult = processingResponse.data.result;
      updateStage('processing', { status: 'completed', progress: 100, result: finalResult });

      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
      const { summary } = finalResult;
      
      if (summary.validation.warnings.length > 0) {
        toast.warning(`–ò–∑–≤–ª–µ—á–µ–Ω–æ ${summary.total_items} –ø–æ–∑–∏—Ü–∏–π —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏`, {
          description: summary.validation.warnings.join('; ')
        });
      } else {
        toast.success(`–£—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ ${summary.total_items} –ø–æ–∑–∏—Ü–∏–π`, {
          description: `–°–∏—Å—Ç–µ–º—ã: ${summary.systems_found.length}, –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —É–¥–∞–ª–µ–Ω–æ: ${summary.duplicates_removed}`
        });
      }

      onExtractionComplete(finalResult);
      onStatusChange(`–ó–∞–≤–µ—Ä—à–µ–Ω–æ! –ò–∑–≤–ª–µ—á–µ–Ω–æ ${summary.total_items} –ø–æ–∑–∏—Ü–∏–π –∏–∑ ${summary.sections_processed.length} —Å–µ–∫—Ü–∏–π`);

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ precision extraction:', error);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —ç—Ç–∞–ø –∫–∞–∫ –æ—à–∏–±–æ—á–Ω—ã–π
      const runningStage = stages.find(s => s.status === 'running');
      if (runningStage) {
        updateStage(runningStage.id, { status: 'error', error: error.message });
      }
      
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö', {
        description: error.message
      });
      onStatusChange(`–û—à–∏–±–∫–∞: ${error.message}`);
    } finally {
      setIsProcessing(false);
    }
  };

  const getStageIcon = (status: ProcessingStage['status']) => {
    switch (status) {
      case 'completed':
        return <CheckCircle className="h-5 w-5 text-green-500" />;
      case 'running':
        return <Clock className="h-5 w-5 text-blue-500 animate-spin" />;
      case 'error':
        return <AlertTriangle className="h-5 w-5 text-red-500" />;
      default:
        return <FileText className="h-5 w-5 text-gray-400" />;
    }
  };

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <FileText className="h-5 w-5" />
            Precision-First –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="text-sm text-muted-foreground">
            –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π —Å –ø–æ–º–æ—â—å—é —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
          </div>
          
          <div className="flex flex-wrap gap-2">
            <Badge variant="outline">
              –°–µ–∫—Ü–∏–π –≤—ã–±—Ä–∞–Ω–æ: {selectedSections.length}
            </Badge>
            <Badge variant="outline">
              –°—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {selectedSections.reduce((sum, section) => 
                sum + (section.pageRange.end - section.pageRange.start + 1), 0
              )}
            </Badge>
          </div>

          <Button 
            onClick={startPrecisionExtraction}
            disabled={isProcessing || selectedSections.length === 0}
            className="w-full"
          >
            {isProcessing ? '–û–±—Ä–∞–±–æ—Ç–∫–∞...' : '–ó–∞–ø—É—Å—Ç–∏—Ç—å Precision Extraction'}
          </Button>
        </CardContent>
      </Card>

      {/* –≠—Ç–∞–ø—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ */}
      <div className="space-y-3">
        {stages.map((stage) => (
          <Card key={stage.id} className="p-4">
            <div className="flex items-center gap-3">
              {getStageIcon(stage.status)}
              <div className="flex-1">
                <div className="flex items-center justify-between">
                  <span className="font-medium">{stage.name}</span>
                  <span className="text-sm text-muted-foreground">
                    {stage.progress}%
                  </span>
                </div>
                <Progress value={stage.progress} className="mt-2" />
                
                {stage.result && (
                  <div className="mt-2 text-xs text-muted-foreground">
                    {stage.id === 'structure' && (
                      <>–ù–∞–π–¥–µ–Ω–æ —Å–µ–∫—Ü–∏–π: {stage.result.found_tables?.length}</>
                    )}
                    {stage.id === 'chunking' && (
                      <>–°–æ–∑–¥–∞–Ω–æ —á–∞—Å—Ç–µ–π: {stage.result.total_chunks}</>
                    )}
                    {stage.id === 'extraction' && (
                      <>–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stage.result.successful}/{stage.result.total_processed}</>
                    )}
                    {stage.id === 'processing' && (
                      <>–ò–∑–≤–ª–µ—á–µ–Ω–æ: {stage.result.summary?.total_items} –ø–æ–∑–∏—Ü–∏–π</>
                    )}
                  </div>
                )}
                
                {stage.error && (
                  <div className="mt-2 text-xs text-red-500">
                    –û—à–∏–±–∫–∞: {stage.error}
                  </div>
                )}
              </div>
            </div>
          </Card>
        ))}
      </div>

      {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑–≤–ª–µ—á–µ–Ω–∏—è */}
      {stages.find(s => s.id === 'processing')?.status === 'completed' && 
       stages.find(s => s.id === 'processing')?.result && (
        <ExtractionResults 
          extractionResult={stages.find(s => s.id === 'processing')?.result}
        />
      )}
    </div>
  );
};